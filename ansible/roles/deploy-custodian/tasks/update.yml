---
- name: clone backend github
  git:
    repo: "{{backend_repo}}"
    dest: "{{workspace}}/backend"
    force: yes
    version: master

- name: clone frontend github
  git:
    repo: "{{frontend_repo}}"
    dest: "{{workspace}}/frontend"
    force: yes
    version: master

- name: gather neo4j facts
  ec2_instance_facts:
    region: "{{region}}"
    filters:
      "tag:Name": "{{stack_name}}-{{database_name}}" 
      "instance-state-name": running
  register: database

- name: set neo4j bearer
  shell: echo "Basic $(echo -n "neo4j:{{neo4j_password}}" | base64)"
  register: output_bearer

- name: set instance ip
  set_fact:
    neo4j_ip: "{{ database.instances[0].network_interfaces[0].private_ip_address }}"
    bearer: "{{output_bearer.stdout_lines}}"

- name: remove the application_example.properties file 
  file:
    path: "{{workspace}}/backend/src/main/resources/application_example.properties"
    state: absent

- name: copy application.properties file to /src/main/resources/
  template:
    src: application.properties.j2
    dest: "{{workspace}}/backend/src/main/resources/application.properties"

- name: build backend code
  command: /usr/local/maven/bin/mvn package -DskipTests
  args:
    chdir: "{{workspace}}/backend"

- name: copy Bento-0.0.1.war to api.war
  copy:
    remote_src: yes
    src: "{{workspace}}/backend/target/Bento-0.0.1.war"
    dest: "{{workspace}}/backend/target/ROOT.war"

- name: build custodian/bento-backend image
  docker_image:
    build:
      path: "{{workspace}}/backend"
      dockerfile: "{{workspace}}/backend/dockerfiles/backend-dockerfile"
    name: custodian/bento-backend
    tag: latest
    force_tag: yes
    source: build
    
- name: copy environment file to {{workspace}}/bento-frontend
  template:
    src: env.j2
    dest: "{{workspace}}/frontend/.env"

- name: run npm install in {{workspace}}/bento-frontend/
  shell: "{{item}}"
  args:
    chdir: "{{workspace}}/frontend"
  ignore_errors: True
  loop:
    - npm install 
  
- name: run npm build in frontend
  shell: npm run-script build
  args:
    chdir: "{{workspace}}/frontend"
  ignore_errors: True
          
- name: build custodian/bento-frontend image
  docker_image:
    build:
      path: "{{workspace}}/frontend"
      dockerfile: "{{workspace}}/backend/dockerfiles/frontend-dockerfile"
      # pull: yes
      nocache: yes
    name: custodian/bento-frontend
    tag: latest
    force_tag: yes
    source: build

- name: create task definition 
  ecs_taskdefinition:
    containers:
    - name: backend
      essential: true
      image: "custodian/bento-backend:latest"
      portMappings:
      - containerPort: "8080"
        hostPort: "8080"
    network_mode: bridge
    family: "{{stack_name}}-backend"
    memory: '512'
    cpu: '512'
    state: present
    region: "{{region}}"
  register: task_output

- name: create task definition 
  ecs_taskdefinition:
    containers:
    - name: frontend
      essential: true
      image: "custodian/bento-frontend:latest"
      portMappings:
      - containerPort: "80"
        hostPort: "80"
    network_mode: bridge
    family: "{{stack_name}}-frontend"
    state: present
    memory: '512'
    cpu: '512'
    region: "{{region}}"
  register: task_output

- name: query task definition
  ecs_taskdefinition_facts:
    task_definition: "{{stack_name}}-frontend"
    region: "{{region}}" 
  register: task_frontend

- name: query task definition
  ecs_taskdefinition_facts:
    task_definition: "{{stack_name}}-backend"
    region: "{{region}}" 
  register: task_backend

- name: query backend service
  ecs_service_facts:
    cluster: "{{cluster_name}}"
    service: "{{stack_name}}-backend"
    details: true
    region: "{{region}}"
  register: service_backend

- name: query ecs service
  ecs_service_facts:
    cluster: "{{cluster_name}}"
    service: "{{stack_name}}-frontend"
    details: true
    region: "{{region}}"
  register: service_frontend

- name: set facts
  set_fact:
    frontend_revision: "{{task_frontend.revision}}"
    backend_revision: "{{task_backend.revision}}"
    task_backend_name: "{{task_backend.family}}"
    task_frontend_name: "{{task_frontend.family}}"
    lb_frontend: "{{service_frontend.services[0].loadBalancers}}"
    lb_backend: "{{service_backend.services[0].loadBalancers}}"
    role_arn: "{{service_backend.services[0].roleArn}}"

- name: update frontend service
  ecs_service:
    state: present
    name: "{{stack_name}}-frontend"
    cluster: "{{cluster_name}}"
    task_definition: "{{task_frontend_name}}:{{frontend_revision}}"
    role: "{{role_arn}}"
    force_new_deployment: yes
    deployment_configuration:
      minimum_healthy_percent: 0
      maximum_percent: 100
    desired_count: 1
    load_balancers: "{{ lb_frontend }}"
    region: "{{region}}"
  register: service_frontend_output

- name: update backend service
  ecs_service:
    state: present
    name: "{{stack_name}}-backend"
    cluster: "{{cluster_name}}"
    task_definition: "{{task_backend_name}}:{{backend_revision}}"
    role: "{{role_arn}}"
    force_new_deployment: yes
    deployment_configuration:
      minimum_healthy_percent: 0
      maximum_percent: 100
    desired_count: 1
    load_balancers: "{{ lb_backend }}"
    region: "{{region}}"
  register: service_backend_output

